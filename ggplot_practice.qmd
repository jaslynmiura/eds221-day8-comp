---
title: "Ggplot Practice"
author: "Jaslyn Miura"
format: html
editor_options: 
  chunk_output_type: console
---
Attaching packages
```{r}

library(tidyverse)
library(here)
library(janitor)
library(paletteer)

```

## ggplot basics
Read in lizard data
```{r}

lizards <- read_csv(here("data_tidy", "lizards.csv"))

```

## The essentials
- data
- aesthestics
- geometry

```{r}

# ggplot essentials, 3 ways
# first
# data and aesthetics stay consistent throughout plot
ggplot(data = lizards, 
       aes(x = total_length, y = weight)) + # (1 and 2)
  geom_point() # 3

# second
# data stays consistent throughout plot
ggplot(data = lizards) + 
  geom_point(aes(x = total_length, y = weight))

# third
# nothing stays consistent
ggplot() +
  geom_point(data = lizards,
             aes(x = total_length, y = weight))

# makes the figure, syntax is a little different


```

## Swap out geometries
```{r}
# bad example
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_line()
```

Some geometry types only need one axis
```{r}

ggplot(data = lizards,
       aes(x = total_length)) + 
  geom_histogram()

```

Jitter plots usually are best with one categorical and one continuous variable
```{r}

ggplot(data = lizards,
       aes(x = weight, y = common_name)) +
  geom_jitter()

```
## Aesthetic mapping
### Updating based on a constant value
Don't need to use the `aes()` function
```{r}

ggplot(data = lizards, aes(x = weight)) +
  geom_histogram(color = "#007991",
                 fill = "#CAE7B9",
                 alpha = 0.5,
                 linetype = "dashed")

```

## Updating aesthetics based on variables
In that case, we need to use the `aes()` function
```{r}

ggplot(data = lizards,
       aes(x = total_length, y = weight)) + 
  geom_point(aes(color = common_name),
             alpha = 0.3)

```

## Themes
# Update axis labels
```{r}

ggplot(data = lizards,
       aes(x = weight, y = site)) + 
  geom_jitter(aes(color = common_name)) + 
  theme_minimal() +
  labs(x = "Weight (g)",
       y = "Study site",
       title = "Lizard weights across sites at Jornada",
       color = "Species") # color changes the legend title, it's color because we used species for color

```

## Reorder data
```{r}

lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts, 
       aes(x = n, y = fct_reorder(common_name, n))) + 
  geom_col() +
  labs(x = "Individuals (n)",
       y = "Species common name")

```

## Advanced ggplot customization
```{r}

ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point() + 
  scale_x_continuous(breaks = c(0, 250, 500),
                     limits = c(0, 500)) +
  scale_y_continuous(breaks = seq(from = 0, 
                                  to = 70,
                                  by = 10),
                     limits = c(0, 70)) + 
  labs(x = "Total length (mm)",
       y = "Weight (grams)") +
  theme_minimal()

```


```{r}

# counting up the number of lizards caught per day
lizard_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(data = lizard_counts,
       aes(x = date, y = n)) + 
  geom_line() + 
  scale_x_date(breaks = scales::breaks_width("2 years"),
               labels = scales::label_date("%Y"))

```

### Customization aesthetics with `scale()` functions
```{r}

# color gradient with just 2 colors
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) + 
  scale_color_gradient(low = "purple", high = "gold")

# color gradient with more than 2 colors
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) + 
  scale_color_gradientn(colors = c("gold", "red", "purple", "navy", "black"))

# create a gradient of color bins
ggplot(data = lizards,
       aes(x = total_length, y = weight)) + 
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "purple", high = "gold", 
                    breaks = seq(0, 80, by = 10))

```


```{r}

ggplot(data = lizards,
       aes(x = common_name, y = total_length)) + 
  geom_boxplot(aes(fill = common_name),
               show.legend = FALSE) + 
  coord_flip()

```

```{r}

lizards_mean <- lizards %>% 
  mutate(common_name = fct_reorder(common_name,
                                   total_length, .fun = median))

ggplot(data = lizards_mean,
       aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) + 
  scale_fill_paletteer_d(palette = "rcartocolor::ArmyRose") + 
  labs(x = "Total length (mm)",
       y = "Species") +
  theme_minimal() + 
  theme(panel.grid.minor = element_blank())

```


# Patchwork to creare compound figures
```{r}
library(patchwork)

# saving plots as objects
p1 <- ggplot(data = lizards_mean,
       aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) + 
  scale_fill_paletteer_d(palette = "rcartocolor::ArmyRose") + 
  labs(x = "Total length (mm)",
       y = "Species") +
  theme_minimal() + 
  theme(panel.grid.minor = element_blank())

p2 <- ggplot(data = lizards,
       aes(x = total_length, y = weight)) + 
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "purple", high = "gold", 
                    breaks = seq(0, 80, by = 10))

p3 <- ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) + 
  scale_color_gradientn(colors = c("gold", "red", "purple", "navy", "black"))


```

```{r}

# `|` puts plots next to each other
# `/` puts plots on top of each other

(p1 | p2) & theme_get()
(p1 / p2) & theme_get()

(p1 | p2 | p3) & theme_get()

# combinations of next to and on top of each other
combo <- ((p1 | p2) / p3)

((combo | combo) / (combo | combo)) & theme_get()

```

